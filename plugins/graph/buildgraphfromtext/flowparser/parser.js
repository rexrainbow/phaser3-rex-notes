/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7,9,10,25,26,27,28,34,35],$V1=[1,19],$V2=[1,20],$V3=[1,22],$V4=[32,33],$V5=[2,39],$V6=[1,28],$V7=[1,26],$V8=[1,27],$V9=[2,42],$Va=[7,9,10],$Vb=[7,9,10,23,32,33],$Vc=[1,7,9,25,26,27,28,34,35],$Vd=[2,16],$Ve=[1,37],$Vf=[2,18],$Vg=[1,39],$Vh=[1,45],$Vi=[1,46],$Vj=[1,51],$Vk=[1,54],$Vl=[1,55],$Vm=[9,19,24,27,34],$Vn=[9,19,24],$Vo=[19,24,27,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"document":3,"init":4,"statements":5,"opt_eof":6,"EOF":7,"line_end":8,"EOL":9,";":10,"blank_line":11,"statement":12,"defaults_statement":13,"node_statement":14,"edge_statement":15,"opt_semicolon":16,"opt_eol":17,"sep":18,",":19,"attribute_list":20,"attribute":21,"attribute_block":22,"[":23,"]":24,"NODE":25,"EDGE":26,"IDENT":27,"STAR_NAMED":28,"edge_chain":29,"edge_attribute_opt":30,"node_ref":31,"->":32,"INVIS_ARROW":33,"QUOTED_STRING":34,"STAR":35,"attribute_key":36,"=":37,"attribute_value":38,"NUMBER":39,"HEXNUMBER":40,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",9:"EOL",10:";",19:",",23:"[",24:"]",25:"NODE",26:"EDGE",27:"IDENT",28:"STAR_NAMED",32:"->",33:"INVIS_ARROW",34:"QUOTED_STRING",35:"STAR",37:"=",39:"NUMBER",40:"HEXNUMBER"},
productions_: [0,[3,3],[6,0],[6,1],[4,0],[8,1],[8,1],[8,1],[11,1],[5,0],[5,2],[5,2],[12,1],[12,1],[12,1],[12,1],[16,0],[16,1],[17,0],[17,1],[17,2],[18,1],[18,2],[20,1],[20,3],[20,2],[22,5],[13,3],[13,3],[14,3],[14,2],[14,3],[15,3],[29,3],[29,3],[29,3],[29,3],[30,0],[30,1],[31,1],[31,1],[31,1],[31,1],[36,1],[36,1],[21,3],[38,1],[38,1],[38,1],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
          nodes: getNodesArray(),
          edges: edges
        };
      
break;
case 4:
 resetState(); 
break;
case 23:

        var o = {};
        o[$$[$0].key] = $$[$0].value;
        this.$ = o;
      
break;
case 24:

        $$[$0-2][$$[$0].key] = $$[$0].value;
        this.$ = $$[$0-2];
      
break;
case 25:

        /* trailing comma: nothing to add */
        this.$ = $$[$0-1];
      
break;
case 26:
 this.$ = $$[$0-2]; 
break;
case 27:

        var parts = splitNodeParameters($$[$0-1]);
        mergeInto(currentDefaults.node, parts.parameters);
        mergeInto(currentDefaults.nodeLayout, parts.layoutOptions);
      
break;
case 28:
 
        mergeInto(currentDefaults.edge, $$[$0-1]); 
      
break;
case 29:
 
        var parts = splitNodeParameters($$[$0-1]);
        var n = ensureNode($$[$0-2], parts.parameters);
        mergeInto(n.layoutOptions, parts.layoutOptions);
      
break;
case 30:
 
        ensureNode($$[$0-1], {}); 
      
break;
case 31:

        var label = yytext.slice(1);
        var id = getOrCreateNamedDummy(label);
        var parts = splitNodeParameters($$[$0-1]);
        var n = ensureNode(id, parts.parameters);
        mergeInto(n.layoutOptions, parts.layoutOptions);
      
break;
case 32:

        var chainParams = $$[$0-1] || null;
        var chainBase = merged(currentDefaults.edge, chainParams);
        for (var i = 0; i < $$[$0-2].edgePairs.length; i += 1) {
          var pair = $$[$0-2].edgePairs[i];
          var perPair = pair.$invisible
            ? merged(chainBase, { render: false, $invisible: true, 'elk.edge.thickness': 0 })
            : chainBase;
          addEdge(pair.sourceId, pair.targetId, perPair);
        }
      
break;
case 33:

        ensureNode($$[$0-2].id, $$[$0-2].parameters);
        ensureNode($$[$0].id, $$[$0].parameters);
        this.$ = {
          lastNodeId: $$[$0].id,
          edgePairs: [{ sourceId: $$[$0-2].id, targetId: $$[$0].id }]
        };
      
break;
case 34:

        ensureNode($$[$0-2].id, $$[$0-2].parameters);
        ensureNode($$[$0].id, $$[$0].parameters);
        this.$ = {
          lastNodeId: $$[$0].id,
          edgePairs: [{ sourceId: $$[$0-2].id, targetId: $$[$0].id, $invisible: true }]
        };
      
break;
case 35:

        ensureNode($$[$0].id, $$[$0].parameters);
        $$[$0-2].edgePairs.push({ sourceId: $$[$0-2].lastNodeId, targetId: $$[$0].id });
        this.$ = { lastNodeId: $$[$0].id, edgePairs: $$[$0-2].edgePairs };
      
break;
case 36:

        ensureNode($$[$0].id, $$[$0].parameters);
        $$[$0-2].edgePairs.push({ sourceId: $$[$0-2].lastNodeId, targetId: $$[$0].id, $invisible: true });
        this.$ = { lastNodeId: $$[$0].id, edgePairs: $$[$0-2].edgePairs };
      
break;
case 37:
 this.$ = null; 
break;
case 38:
 this.$ = $$[$0]; 
break;
case 39:
 this.$ = { id: $$[$0], parameters: {} }; 
break;
case 40:
 this.$ = { id: unquote(yytext), parameters: {} }; 
break;
case 41:
        
        var gen = createAnonymousDummyNode();
        this.$ = { id: gen, parameters: { $dummy: true } };
      
break;
case 42:

        var label = yytext.slice(1);
        var id = getOrCreateNamedDummy(label);
        this.$ = { id: id, parameters: { $dummy: true } };
      
break;
case 43: case 49:
 this.$ = yytext; 
break;
case 44: case 48:
 this.$ = unquote(yytext); 
break;
case 45:
 this.$ = { key: $$[$0-2], value: $$[$0] }; 
break;
case 46:
 this.$ = Number(yytext); 
break;
case 47:
 this.$ = parseInt(yytext, 16); 
break;
}
},
table: [o($V0,[2,4],{3:1,4:2}),{1:[3]},o($V0,[2,9],{5:3}),{1:[2,2],6:4,7:[1,7],9:[1,8],10:[1,12],11:5,12:6,13:9,14:10,15:11,25:[1,13],26:[1,14],27:[1,15],28:[1,16],29:17,31:18,34:$V1,35:$V2},{1:[2,1]},o($V0,[2,10]),o($V0,[2,11]),{1:[2,3]},o($V0,[2,8]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),{22:21,23:$V3},{22:23,23:$V3},o($V4,$V5,{22:24,8:25,7:$V6,9:$V7,10:$V8,23:$V3}),o($V4,$V9,{22:29,23:$V3}),o($Va,[2,37],{30:30,22:33,23:$V3,32:[1,31],33:[1,32]}),{32:[1,34],33:[1,35]},o($Vb,[2,40]),o($Vb,[2,41]),o($Vc,$Vd,{16:36,10:$Ve}),o([27,34],$Vf,{17:38,9:$Vg}),o($Vc,$Vd,{16:40,10:$Ve}),{7:$V6,8:41,9:$V7,10:$V8},o($V0,[2,30]),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),{7:$V6,8:42,9:$V7,10:$V8},{7:$V6,8:43,9:$V7,10:$V8},{27:$Vh,28:$Vi,31:44,34:$V1,35:$V2},{27:$Vh,28:$Vi,31:47,34:$V1,35:$V2},o($Va,[2,38]),{27:$Vh,28:$Vi,31:48,34:$V1,35:$V2},{27:$Vh,28:$Vi,31:49,34:$V1,35:$V2},o($V0,[2,27]),o($V0,[2,17]),{9:$Vj,20:50,21:52,27:$Vk,34:$Vl,36:53},o($Vm,[2,19]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,31]),o($V0,[2,32]),o($Vb,[2,35]),o($Vb,$V5),o($Vb,$V9),o($Vb,[2,36]),o($Vb,[2,33]),o($Vb,[2,34]),{9:$Vg,17:56,18:57,19:[1,58],24:$Vf},o($Vm,[2,20]),o($Vn,[2,23]),{37:[1,59]},{37:[2,43]},{37:[2,44]},{9:$Vj,24:[1,60]},o($Vn,[2,25],{36:53,21:61,27:$Vk,34:$Vl}),o($Vo,[2,21],{17:62,9:$Vg}),{27:[1,67],34:[1,66],38:63,39:[1,64],40:[1,65]},o($V0,[2,26]),o($Vn,[2,24]),o($Vo,[2,22],{9:$Vj}),o($Vn,[2,45]),o($Vn,[2,46]),o($Vn,[2,47]),o($Vn,[2,48]),o($Vn,[2,49])],
defaultActions: {4:[2,1],7:[2,3],54:[2,43],55:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // ----- module-scope state -----
  var nodesMap, edges, dummyAutoId, edgeAutoId, currentDefaults, namedDummyMap;
  // --- switches & indices ---
  var allowParallelEdges;               // default true
  var edgeKeyToIndexMap;                // (sourceId,targetId) -> edges[] index

  function resetState() {
    nodesMap = Object.create(null);
    edges = [];
    dummyAutoId = 0;   // for anonymous dummy nodes: _d1, _d2, ...
    edgeAutoId  = 0;   // for edges: _e1, _e2, ...
    currentDefaults = {
      node: {},
      nodeLayout: {},
      edge: {}
    };
    allowParallelEdges = false;
    edgeKeyToIndexMap = Object.create(null);
    namedDummyMap = Object.create(null);
  }

  function shallowCopy(obj) {
    var out = {};
    for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) out[k] = obj[k];
    return out;
  }
  function mergeInto(target, src) {
    if (!src) return target;
    for (var k in src) if (Object.prototype.hasOwnProperty.call(src, k)) target[k] = src[k];
    return target;
  }
  function merged(a, b) {
    return mergeInto(mergeInto({}, a || {}), b || {});
  }
  function splitNodeParameters(parameters) {
    const normalParameters = {};
    const elkLayoutOptions = {};
  
    for (const key in parameters) {
      if (!Object.prototype.hasOwnProperty.call(parameters, key)) {
        continue;
      }
  
      const value = parameters[key];
      if (key.startsWith('elk.')) {
        elkLayoutOptions[key] = value;
      } else {
        normalParameters[key] = value;
      }
    }
  
    return {
      parameters: normalParameters,
      layoutOptions: elkLayoutOptions
    };
  }


  function makeEdgeKey(sourceId, targetId) {
    return sourceId + '->' + targetId;
  }
  var dedupePolicy = "first-wins";

  /**
   * Ensure a node exists.
   * - If creating a **dummy** (newParameters && newParameters.$dummy === true):
   *     DO NOT seed with NODE defaults; start from {} and only set $dummy flag (+ any explicit fields).
   * - Else (normal node first creation): seed with NODE defaults, then merge explicit params.
   */
  function ensureNode(nodeId, newParameters) {
    var isDummyCreation = !!(newParameters && newParameters.$dummy === true);
    var nodeItem = nodesMap[nodeId];
    if (!nodeItem) {
      // seed parameters: {} for dummy, NODE defaults for normal nodes
      var seed = (isDummyCreation)? {} : shallowCopy(currentDefaults.node);
      nodeItem = { id: nodeId, parameters: seed, layoutOptions: {} };
      if (!isDummyCreation) {
        mergeInto(nodeItem.layoutOptions, currentDefaults.nodeLayout);
      }
      nodesMap[nodeId] = nodeItem;
    }
    if (newParameters && typeof newParameters === 'object') {
      mergeInto(nodeItem.parameters, newParameters);
    }
    return nodeItem;
  }

  /** Create a fresh anonymous dummy node id like _d1, and register it as dummy (no NODE defaults). */
  function createAnonymousDummyNode() {
    dummyAutoId += 1;
    var dummyNodeId = "_d$" + String(dummyAutoId);
    ensureNode(dummyNodeId, { $dummy: true });
    return dummyNodeId;
  }

  function getOrCreateNamedDummy(label) {
    var id = namedDummyMap[label];
    if (id) {
      return id
    };
  
    id = '_d#' + label;
    namedDummyMap[label] = id;
  
    ensureNode(id, { $dummy: true });
    return id;
  }

  /** Create a fresh edge id like _e1. */
  function createEdgeId() {
    edgeAutoId += 1;
    return "_e" + String(edgeAutoId);
  }

  /**
   * Push an edge with a generated id and merged parameters:
   * effectiveEdgeParams = merge(currentDefaults.edge, edgeParameters)
   */
  var dedupePolicy = "first-wins";
  function addEdge(sourceId, targetId, edgeParameters) {
    var key = makeEdgeKey(sourceId, targetId);

    if (!allowParallelEdges) {
      var existIdx = edgeKeyToIndexMap[key];
      if (existIdx != null) {
        if (dedupePolicy === 'last-wins') {
          edges[existIdx].parameters = merged(currentDefaults.edge, edgeParameters || {});
        }
        return;
      }
    }

    var effective = merged(currentDefaults.edge, edgeParameters || {});
    edges.push({
      id: createEdgeId(),
      sourceId: sourceId,
      targetId: targetId,
      parameters: effective
    });

    edgeKeyToIndexMap[key] = edges.length - 1;
  }

  function getNodesArray() {
    var out = [];
    for (var id in nodesMap) {
      if (Object.prototype.hasOwnProperty.call(nodesMap, id)) {
        out.push(nodesMap[id]);
      }
    }
    return out;
  }

  function unquote(text) { 
    return text.slice(1, -1); 
  }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace only */
break;
case 1:return 9
break;
case 2:/* skip line comments starting with # */
break;
case 3:/* skip line comments starting with // */
break;
case 4:/* skip C-style block comments */
break;
case 5:return 25     /* defaults for nodes (UPPERCASE) */
break;
case 6:return 26     /* defaults for edges (UPPERCASE) */
break;
case 7:return 23
break;
case 8:return 24
break;
case 9:return 19
break;
case 10:return 37
break;
case 11:return 10
break;
case 12:return 32
break;
case 13:return 33
break;
case 14:return 28
break;
case 15:return 35
break;
case 16:return 40
break;
case 17:return 39         /* integer/float */
break;
case 18:return 34
break;
case 19:return 27          /* bare identifiers */
break;
case 20:return 7
break;
case 21:return 'INVALID'
break;
}
},
rules: [/^(?:[ \t\f]+)/,/^(?:\r\n|\r|\n)/,/^(?:#.*)/,/^(?:\/\/.*)/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:NODE\b)/,/^(?:EDGE\b)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:=)/,/^(?:;)/,/^(?:->)/,/^(?:\*>)/,/^(?:\*[A-Za-z0-9_]+)/,/^(?:\*)/,/^(?:\b0x[0-9A-Fa-f]+\b)/,/^(?:-?[0-9]+(\.[0-9]+)?\b)/,/^(?:"(\\.|[^\"\\])*"|'(\\.|[^\'\\])*')/,/^(?:[A-Za-z_](?:[A-Za-z0-9_-]|\.[A-Za-z0-9_-])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
}